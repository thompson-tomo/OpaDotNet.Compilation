name: CI

on:
  push:
    branches: [ main, release/v* ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:
    branches: [ main, release/v* ]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_call:
    inputs:
      release:
        required: false
        type: boolean

jobs:
  go_build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: glibc version
      run: ldd --version

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: './interop/go.mod'

    - name: Install gcc
      run: sudo apt-get install -y gcc gcc-mingw-w64

    - name: Build native
      shell: pwsh
      run: ./build.ps1

    - uses: actions/upload-artifact@v4
      with:
        name: bin
        path: ./bin/*
        if-no-files-found: error
        retention-days: 1

  build:

    needs: go_build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: get_go_bin
      uses: actions/download-artifact@v4
      with:
        name: bin
        path: bin

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          7.0.x
          8.0.x

    - name: Restore Tools
      run: dotnet tool restore

    - name: Calc Version
      run: dotnet gitversion /updateprojectfiles /output buildserver

    - name: Build
      run: dotnet build -c Release

    - name: Download OPA CLI
      run: |
        echo "Downloading OPA ${OPA_CLI_VERSION}"
        curl -L --fail -o /usr/local/bin/opa https://openpolicyagent.org/downloads/${OPA_CLI_VERSION}/opa_linux_amd64_static
        chmod 755 /usr/local/bin/opa
      env:
        OPA_CLI_VERSION: ${{ vars.OPA_CLI_VERSION }}

    - name: Test
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov --logger:"console;"

    - name: Coveralls
      uses: coverallsapp/github-action@v2
      continue-on-error: true
      with:
        files: ./tests/TestResults/coverage.net7.0.info ./tests/TestResults/coverage.net8.0.info
        format: lcov

    - name: Pack
      if: ${{ inputs.release }}
      run: dotnet pack -c Release --no-build

    - uses: actions/upload-artifact@v3
      if: ${{ inputs.release }}
      with:
        name: artifacts
        path: ./artifacts/package/release/*
